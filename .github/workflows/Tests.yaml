# Distributed under the MIT License.
# See LICENSE.txt for details.

# Continuous integration tests that pull requests are required to pass. This
# workflow can also be dispatched manually to tag and release versions.
name: Tests

# Set any defaults for the runs below.
# - use bash as the default shell since this is almost certainly what
#   is always expected. We use regular expressions in a few places
#   that rely on bash.
defaults:
  run:
    shell: bash

# Note that by default the jobs only run on the base repository, testing pull
# requests and merge commits. Enable GitHub Actions in your fork's repository
# settings to also run the tests on every push to one of your branches.
on:
  # We run all jobs when pull requests are opened, commits are pushed, or pull
  # requests are re-opened after being closed.
  # The jobs triggered by this event run on the base repository of the pull
  # request, so they have access to its caches.
  pull_request:
  # We run those jobs that require no information about a pull request (e.g.
  # unit tests) also on `push` events. This setup tests merge commits into
  # `develop` and also builds up caches on `develop` that can be re-used by PRs.
  # It also runs the jobs on forks if they have GitHub Actions enabled.
  push:
    branches-ignore:
      - gh-pages
  # Allow running the workflow manually to run tests and optionally release a
  # version on success (see the dev guide on "Automatic versioning")
  workflow_dispatch:
    inputs:
      release_version:
        description: >
          Enter a version name YYYY.MM.DD[.TWEAK] to create a release on success
        required: false
        default: ''

jobs:
  # Make sure no commits are prefixed with `fixup` or similar keywords. See
  # `tools/CheckCommits.sh` for details.
  check_commits:
    name: Commits
    # Only run on pull requests since we don't check _all_ commits, but only
    # those that came after the PR's base ref.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check commits
        # `CheckCommits.sh` tests against the local `develop` branch, so that's
        # where we fetch the pull-request's base-branch to. Typically, it is
        # the upstream `sxs-collaboration/spectre/develop` branch.
        run: >
          cd $GITHUB_WORKSPACE

          git remote add upstream
          https://github.com/${{ github.repository }}.git

          git remote -v

          git fetch upstream ${{ github.base_ref }}:develop

          ./tools/CheckCommits.sh

  # - Run simple textual checks over files in the repository, e.g. checking for
  #   a license, line length limits etc. See `tools/CheckFiles.sh` for details.
  # - Run format checker for python to make sure the code is formatted correctly
  # - Check the metadata are consistent
  check_files_and_formatting:
    name: Files and formatting
    runs-on: ubuntu-latest
    container:
      image: sxscollaboration/spectrebuildenv:latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Some tests involve release tags, which may not have been pushed to
      # forks. Fetching them here.
      - name: Fetch upstream tags on forks
        if: github.repository != 'sxs-collaboration/spectre'
        run: |
          git fetch --tags https://github.com/sxs-collaboration/spectre
      - name: Install Python dependencies
        run: |
          pip3 install -r .github/scripts/requirements-release.txt
      - name: Test tools
        run: |
          python3 -m unittest discover -p 'Test_*' tests.tools -v
      - name: Check Python formatting
        run: |
          cd $GITHUB_WORKSPACE
          ./tools/CheckPythonFormatting.sh
      - name: Check metadata
        run: |
          python3 tools/CheckMetadata.py
      - name: Check the metadata is consistent with the releases
        # No need to check this on forks. They would need to set a Zenodo token
        # for this test. Also disable on PRs because they don't have access to
        # the repo's secrets.
        if: >
          github.event_name != 'pull_request'
        run: |
          python3 .github/scripts/Release.py prepare -vv --check-only \
            --zenodo-token ${{ secrets.ZENODO_READONLY_TOKEN }} \
            --zenodo-sandbox \
            --github-token ${{ secrets.GITHUB_TOKEN }}
          python3 .github/scripts/Release.py publish -vv --check-only \
            --zenodo-token ${{ secrets.ZENODO_READONLY_TOKEN }} \
            --zenodo-sandbox \
            --github-token ${{ secrets.GITHUB_TOKEN }}
      - name: Check release notes
        run: |
          python3 tools/CompileReleaseNotes.py -vv -o release_notes.md \
            --github-token ${{ secrets.GITHUB_TOKEN }}
      - name: Upload release notes
        uses: actions/upload-artifact@v2
        with:
          name: release-notes
          path: release_notes.md
      # GitHub doesn't display artifacts until the workflow has completed, so we
      # print the release notes here to be able to review them before approving
      # a release
      - name: Print release notes
        run: |
          cat release_notes.md

  # Release a new version on manual events when requested and the tests pass.
  # Only enable this on the `sxs-collaboration/spectre` repository (not on
  # forks).
  release_version:
    name: Release version
    # Running in a protected environment that provides the necessary secrets
    environment: release
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/develop'
        && github.event_name == 'workflow_dispatch'
        && github.event.inputs.release_version != ''
    needs:
      - check_files_and_formatting
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          # Using a personal access token with admin privileges here so this
          # action can push to protected branches. Note that this also means
          # that the pushes can trigger additional workflows (GitHub only
          # prevents pushes with the default GITHUB_TOKEN from triggering
          # additional workflows).
          token: ${{ secrets.GH_TOKEN_RELEASE }}
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - name: Install Python dependencies
        run: |
          pip3 install -r .github/scripts/requirements-release.txt
      # We use the current date as tag name, unless a tag name was specified
      # as input to the `workflow_dispatch` event
      - name: Determine release version
        id: get_version
        run: |
          INPUT_RELEASE_VERSION=${{ github.event.inputs.release_version }}
          RELEASE_VERSION=${INPUT_RELEASE_VERSION:-$(date +'%Y.%m.%d')}
          echo "Release version is: ${RELEASE_VERSION}"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
      - name: Validate release version
        run: |
          VERSION_PATTERN="^([0-9]{4})\.([0-9]{2})\.([0-9]{2})(\.[0-9]+)?$"
          if [[ $RELEASE_VERSION =~ $VERSION_PATTERN ]]; then
            if [ $(date +'%Y') != ${BASH_REMATCH[1]} ] ||
            [ $(date +'%m') != ${BASH_REMATCH[2]} ] ||
            [ $(date +'%d') != ${BASH_REMATCH[3]} ]; then
              TODAY=$(date +'%Y.%m.%d')
              echo "'$RELEASE_VERSION' doesn't match current date '$TODAY'"
            fi
          else
            echo "'$RELEASE_VERSION' doesn't match '$VERSION_PATTERN'"
            exit 1
          fi
          if [ $(git tag -l "v$RELEASE_VERSION") ]; then
            echo "Tag 'v$RELEASE_VERSION' already exists"
            exit 1
          fi
          if [ $(git rev-parse HEAD) == $(git rev-parse origin/release) ]; then
            echo "Nothing changed since last release $(git describe release)."
            exit 1
          fi
      - name: Reserve Zenodo DOI and prepare repository
        run: |
          python3 .github/scripts/Release.py prepare -vv \
            --version $RELEASE_VERSION \
            --zenodo-token ${{ secrets.ZENODO_READWRITE_TOKEN }} \
            --zenodo-sandbox \
            --github-token ${{ secrets.GITHUB_TOKEN }}
          git diff
      - name: Download release notes
        uses: actions/download-artifact@v2
        id: release-notes
        with:
          name: release-notes
          path: ~/release-notes
      # Push a commit tagged with the new version to `develop` and `release`.
      # The push will trigger the workflow again because we're using a personal
      # access token. The triggered workflow will build and deploy the
      # documentation so we don't need to do that here.
      - name: Commit and push
        run: |
          git config user.name sxs-bot
          git config user.email sxs-bot@black-holes.org
          git commit -a -m "Prepare release $RELEASE_VERSION"
          git show HEAD
          git status
          git tag -a v$RELEASE_VERSION -m "Release $RELEASE_VERSION" HEAD
          git push origin HEAD:develop
          git push origin HEAD:release
          git push origin v$RELEASE_VERSION
      - name: Create release on GitHub
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_RELEASE }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          body_path: >-
            ${{ steps.release-notes.outputs.download-path }}/release_notes.md
      # This action currently doesn't publish the Zenodo record automatically.
      # Instead it prints a link to the website where we can go and hit the
      # "Publish" button when everything looks correct. Once we're convinced the
      # automation works well enough we can add the `--auto-publish` flag to
      # the command below.
      - name: Publish to Zenodo
        run: |
          python3 .github/scripts/Release.py publish -vv \
            --zenodo-token ${{ secrets.ZENODO_PUBLISH_TOKEN }} \
            --zenodo-sandbox \
            --github-token ${{ secrets.GITHUB_TOKEN }}
