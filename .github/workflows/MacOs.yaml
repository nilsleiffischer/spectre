# Distributed under the MIT License.
# See LICENSE.txt for details.

# Continuous integration tests on macOS
# See `Tests.yaml` for the standard suite of continuous integration tests.
name: macOS

on:
  # This is broken, so is only run manually (see issue 2397). Refer to
  # Tests.yaml on what to put here in order to run the tests once the
  # build is fixed.
  workflow_dispatch:
    branches-ignore:
      - gh-pages

jobs:
  # Build all test executables and run unit tests on macOS
  unit_tests_macos:
    name: Unit tests on macOS
    # Don't run on `develop` since we don't require this check to pass for PRs
    # be merged. See `CONTRIBUTING.md` for details.
    # Note: This is commented out to allow running the workflow manually on
    # `develop` while the trigger is set to `workflow_dispatch`.
    # if: github.ref != 'refs/heads/develop'
    runs-on: macos-latest
    env:
      # We install `openblas` instead of using the system version because we
      # encountered this issue:
      # https://github.com/sxs-collaboration/spectre/issues/2131
      SPECTRE_BREW_DEPS: >-
        cmake ccache autoconf automake boost openblas catch2 gsl jemalloc hdf5
        pybind11 yaml-cpp
      SPECTRE_PY_DEPS: numpy scipy h5py
      SPECTRE_SPACK_DEPS: >-
        blaze@3.5 brigand@master libxsmm libsharp~mpi~openmp
      CHARM_VERSION: "6.10.2"
      OSX_DEPLOYMENT_TARGET: "10.11"
      CCACHE_DIR: $HOME/ccache
      CCACHE_MAXSIZE: 400M
      CCACHE_COMPRESS: 1
      CCACHE_COMPRESSLEVEL: 6
      CCACHE_COMPILERCHECK: content
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # Install dependencies with Homebrew if we can so we don't have to build
      # and cache them. We make sure to install only prebuilt "bottles" by
      # fetching them first.
      - name: Install Homebrew dependencies
        run: >
          brew fetch --deps --retry $SPECTRE_BREW_DEPS
          && brew install $SPECTRE_BREW_DEPS
      # Load an existing Python environment and install Python dependencies.
      # We use Python 3.7 for now since Spack has an issue with Python 3.8:
      # https://github.com/spack/spack/issues/14102
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Install Python dependencies
        run: |
          pip install $SPECTRE_PY_DEPS
      # We need to build the remaining dependencies from source, but we can
      # cache them.
      - name: Restore dependency cache
        uses: actions/cache@v1
        id: restore-dependencies
        with:
          path: ~/dependencies
          key: dependencies-macos
      - name: Setup dependency cache directory
        if: steps.restore-dependencies.outputs.cache-hit != 'true'
        run: |
          mkdir -p $HOME/dependencies/spack
      # Install the remaining dependencies using Spack if possible. We install
      # them in an environment that we can activate later. To avoid re-building
      # packages that are already installed by Homebrew we reference them in a
      # 'packages.yaml' file. Pre-built Spack dependencies from the cache are
      # used if available by adding the cache as a Spack mirror.
      - name: Install Spack dependencies
        run: |
          cd $HOME
          mkdir -p .spack
          SPACK_PACKAGES=.spack/packages.yaml
          echo "packages:" > $SPACK_PACKAGES
          echo "  all:" >> $SPACK_PACKAGES
          echo "    compiler: [clang]" >> $SPACK_PACKAGES
          echo "  cmake:" >> $SPACK_PACKAGES
          echo "    paths:" >> $SPACK_PACKAGES
          echo "      cmake: $(brew --prefix cmake)" >> $SPACK_PACKAGES
          echo "    buildable: False" >> $SPACK_PACKAGES
          echo "  autoconf:" >> $SPACK_PACKAGES
          echo "    paths:" >> $SPACK_PACKAGES
          echo "      autoconf: $(brew --prefix autoconf)" >> $SPACK_PACKAGES
          echo "    buildable: False" >> $SPACK_PACKAGES
          cat $SPACK_PACKAGES
          git clone https://github.com/spack/spack.git
          source ./spack/share/spack/setup-env.sh
          spack compiler find --scope defaults
          spack mirror add dependencies file://$HOME/dependencies/spack
          spack env create spectre
          spack env activate spectre
          spack install -j4 --no-check-signature $SPECTRE_SPACK_DEPS
          spack find -v
      # After building the dependencies from source we cache them as compressed
      # tarballs.
      - name: Package built Spack dependencies for caching
        run: |
          cd $HOME
          source ./spack/share/spack/setup-env.sh
          spack env activate spectre
          spack buildcache create -uf -m dependencies $SPECTRE_SPACK_DEPS
      # Install Charm++ separately. We may be able to install it via Spack as
      # well and patch it.
      - name: Install Charm++
        if: steps.restore-dependencies.outputs.cache-hit != 'true'
        run: |
          cd $HOME/dependencies
          wget http://charm.cs.illinois.edu/distrib/charm-${CHARM_VERSION}.tar.gz
          tar -xzf charm-${CHARM_VERSION}.tar.gz
          cd ./charm-v${CHARM_VERSION}
          ./build charm++ multicore-darwin-x86_64 -j4 -O0 \
            -mmacosx-version-min=${OSX_DEPLOYMENT_TARGET}
          rm ../charm-${CHARM_VERSION}.tar.gz
      # Replace the ccache directory that building the dependencies may have
      # generated with the cached ccache directory.
      - name: Clear ccache from dependencies
        run: |
          rm -rf $CCACHE_DIR
          mkdir -p $CCACHE_DIR
      - name: Restore ccache
        uses: actions/cache@v1
        with:
          path: ~/ccache
          key: ccache-macos
      - name: Configure ccache
        run: |
          ccache -pz
      # Configure, build and run tests. See the `unit_tests` job for details.
      # We increase the timeout for tests because `ctest` on the GitHub-hosted
      # macOS VMs appears to be quite slow.
      - name: Configure build with cmake
        run: >
          mkdir build && cd build

          source $HOME/spack/share/spack/setup-env.sh

          spack env activate spectre

          cmake
          -D CMAKE_C_COMPILER=clang
          -D CMAKE_CXX_COMPILER=clang++
          -D CMAKE_Fortran_COMPILER=gfortran
          -D CMAKE_CXX_FLAGS="-Werror"
          -D OVERRIDE_ARCH=x86-64
          -D CHARM_ROOT=$HOME/dependencies/charm-v${CHARM_VERSION}
          -D BLAS_ROOT=$(brew --prefix openblas)
          -D CMAKE_OSX_DEPLOYMENT_TARGET=${OSX_DEPLOYMENT_TARGET}
          -D CMAKE_BUILD_TYPE=Debug
          -D DEBUG_SYMBOLS=OFF
          -D RUN_TESTS_IN_TEST_EXECUTABLES=OFF
          -D STUB_EXECUTABLE_OBJECT_FILES=ON
          -D STUB_LIBRARY_OBJECT_FILES=ON
          -D USE_PCH=ON
          -D USE_CCACHE=ON
          -D BUILD_PYTHON_BINDINGS=ON
          -D SPECTRE_UNIT_TEST_TIMEOUT_FACTOR=3
          -D SPECTRE_INPUT_FILE_TEST_TIMEOUT_FACTOR=3
          -D SPECTRE_PYTHON_TEST_TIMEOUT_FACTOR=3
          $GITHUB_WORKSPACE
      - name: Build tests
        working-directory: build
        run: |
          make -j4 RunTests
      - name: Build executables
        working-directory: build
        run: |
          make test-executables
      - name: Print size of build directory
        working-directory: build
        run: |
          ls | xargs du -sh
          du -sh .
      - name: Diagnose ccache
        run: |
          ccache -s
      - name: Run unit tests
        working-directory: build
        run: |
          ctest --repeat after-timeout:3 --output-on-failure
