// Distributed under the MIT License.
// See LICENSE.txt for details.

#include "Framework/TestingFramework.hpp"

#include <cstddef>

#include "DataStructures/SliceVariables.hpp"
#include "DataStructures/Tensor/EagerMath/Determinant.hpp"
#include "DataStructures/Tensor/Tensor.hpp"
#include "DataStructures/Variables.hpp"
#include "Domain/Creators/Brick.hpp"
#include "Domain/Creators/Interval.hpp"
#include "Domain/Creators/Rectangle.hpp"
#include "Elliptic/Systems/Poisson/FirstOrderSystem.hpp"
#include "Helpers/Elliptic/Systems/Poisson/DgSchemes/FirstOrder.hpp"
#include "Utilities/Gsl.hpp"
#include "Utilities/TMPL.hpp"

SPECTRE_TEST_CASE("Unit.Poisson.DgSchemes.FirstOrder", "[Unit][Elliptic]") {
  /*
   * The following regression tests make these assumptions:
   * - First-order Poisson system
   * - Strong first-order internal penalty DG scheme
   * - Diagonal mass matrix approximation ("mass-lumping")
   * - The `penalty_parameter` is used directly as the prefactor to the penalty
   * term in the numerical flux.
   * - The elements are ordered by block first, and then by segment index of
   * each dimension in turn.
   * - Within each element this is the data layout:
   *   - The primal field precedes the auxiliary field
   *   - Tensor components are ordered first by index, then by dimension (as one
   *   would expect)
   *   - Grid points for each component are stored in column-major format
   *   (corresponding to the order called 'F' in Numpy).
   */
  {
    INFO("1D massless");
    const domain::creators::Interval domain_creator{
        {{-2.}}, {{2.}}, {{false}}, {{1}}, {{3}}};
    const double penalty_parameter = 1.5;
    CAPTURE(penalty_parameter);
    const DenseMatrix<double> expected_operator_matrix{
        {36.0, 6.0, -1.5, -1.5, -2.0, 0.5, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0},
        {-0.0, -0.0, -0.0, 0.5, -0.0, -0.5, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0},
        {-0.75, 3.0, 18.0, -0.5, 2.0, 1.5, -18.0, -3.0, 0.75, -0.0, -0.0, -0.0},
        {-1.5, -2.0, 0.5, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.5, 0.0, -0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {-0.5, 2.0, 0.0, 0.0, 0.0, 1.0, -1.5, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.75, -3.0, -18.0, -0.0, -0.0, -0.0, 18.0, 3.0, -0.75, -1.5, -2.0,
         0.5},
        {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.5, -0.0, -0.5},
        {-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -1.5, 6.0, 36.0, -0.5, 2.0, 1.5},
        {0.0, 0.0, 1.5, 0.0, 0.0, 0.0, 0.0, -2.0, 0.5, 1.0, 0.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, -0.5, 0.0, 1.0, 0.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5, 2.0, 1.5, 0.0, 0.0, 1.0}};

    /*
    Using full mass matrix instead of diagonal approximation:
    [[ 53.625 ,  10.5   ,   6.75  ,  -3.    ,  -2.    ,   2.    ,
         -9.    ,  -1.5   ,   0.375 ,   0.    ,   0.    ,   0.    ],
       [ -8.8125,  -2.25  ,  -4.125 ,   1.25  ,   0.    ,  -1.25  ,
          4.5   ,   0.75  ,  -0.1875,   0.    ,   0.    ,   0.    ],
       [ 16.875 ,   7.5   ,  26.25  ,  -2.    ,   2.    ,   3.    ,
        -27.    ,  -4.5   ,   1.125 ,   0.    ,   0.    ,   0.    ],
       [ -3.    ,  -2.    ,   1.25  ,   1.    ,   0.    ,   0.    ,
         -0.75  ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ],
       [  1.25  ,   0.    ,  -0.875 ,   0.    ,   1.    ,   0.    ,
          0.375 ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ],
       [ -2.    ,   2.    ,   0.75  ,   0.    ,   0.    ,   1.    ,
         -2.25  ,   0.    ,   0.    ,   0.    ,   0.    ,   0.    ],
       [  1.125 ,  -4.5   , -27.    ,   0.    ,   0.    ,   0.    ,
         26.25  ,   7.5   ,  16.875 ,  -3.    ,  -2.    ,   2.    ],
       [ -0.1875,   0.75  ,   4.5   ,   0.    ,   0.    ,   0.    ,
         -4.125 ,  -2.25  ,  -8.8125,   1.25  ,   0.    ,  -1.25  ],
       [  0.375 ,  -1.5   ,  -9.    ,   0.    ,   0.    ,   0.    ,
          6.75  ,  10.5   ,  53.625 ,  -2.    ,   2.    ,   3.    ],
       [  0.    ,   0.    ,   2.25  ,   0.    ,   0.    ,   0.    ,
         -0.75  ,  -2.    ,   2.    ,   1.    ,   0.    ,   0.    ],
       [  0.    ,   0.    ,  -0.375 ,   0.    ,   0.    ,   0.    ,
          0.875 ,   0.    ,  -1.25  ,   0.    ,   1.    ,   0.    ],
       [  0.    ,   0.    ,   0.75  ,   0.    ,   0.    ,   0.    ,
         -1.25  ,   2.    ,   3.    ,   0.    ,   0.    ,   1.    ]]
    */
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<false>(
            domain_creator, penalty_parameter);
    CHECK_MATRIX_APPROX(operator_matrix, expected_operator_matrix);
  }
  {
    INFO("1D massive");
    const domain::creators::Interval domain_creator{
        {{-4.}}, {{4.}}, {{false}}, {{1}}, {{3}}};
    const double penalty_parameter = 1.5;
    CAPTURE(penalty_parameter);
    const DenseMatrix<double> expected_operator_matrix{
        {6., 1., -1. / 4., -1. / 2., -2. / 3., 1. / 6., 0., 0., 0., 0., 0., 0.},
        {0., 0., 0., 2. / 3., 0., -2. / 3., 0., 0., 0., 0., 0., 0.},
        {-1. / 8., 1. / 2., 3., -1. / 6., 2. / 3., 1. / 2., -3., -1. / 2.,
         1. / 8., 0., 0., 0.},
        {-1. / 2., -2. / 3., 1. / 6., 8. / 15., 4. / 15., -2. / 15., 0., 0., 0.,
         0., 0., 0.},
        {2. / 3., 0., -2. / 3., 4. / 15., 32. / 15., 4. / 15., 0., 0., 0., 0.,
         0., 0.},
        {-1. / 6., 2. / 3., 0., -2. / 15., 4. / 15., 8. / 15., -1. / 2., 0., 0.,
         0., 0., 0.},
        {1. / 8., -1. / 2., -3., 0., 0., 0., 3., 1. / 2., -1. / 8., -1. / 2.,
         -2. / 3., 1. / 6.},
        {0., 0., 0., 0., 0., 0., 0., 0., 0., 2. / 3., 0., -2. / 3.},
        {0., 0., 0., 0., 0., 0., -1. / 4., 1., 6., -1. / 6., 2. / 3., 1. / 2.},
        {0., 0., 1. / 2., 0., 0., 0., 0., -2. / 3., 1. / 6., 8. / 15., 4. / 15.,
         -2. / 15.},
        {0., 0., 0., 0., 0., 0., 2. / 3., 0., -2. / 3., 4. / 15., 32. / 15.,
         4. / 15.},
        {0., 0., 0., 0., 0., 0., -1. / 6., 2. / 3., 1. / 2., -2. / 15.,
         4. / 15., 8. / 15.}};
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<true>(
            domain_creator, penalty_parameter);
    CHECK_MATRIX_APPROX(operator_matrix, expected_operator_matrix);
  }
  {
    INFO("2D massless");
    const domain::creators::Rectangle domain_creator{
        {{-4., -3.}}, {{4., 3.}}, {{false, false}}, {{1, 1}}, {{3, 3}}};
    // TODO: update expected matrix for this parameter
    const double penalty_parameter = 1.;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<false>(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        28.,      16., 35. / 2., 12.,      0., 3. / 2., 14.,      2.,  7. / 2.,
        -1. / 2., 1.,  1.,       -1. / 2., 1., 1.,      -1. / 2., 1.,  1.,
        -1.,      -1., -1.,      1.,       1., 1.,      1.,       1.,  1.,
        10.,      -2., -1. / 2., 12.,      0., 3. / 2., 32.,      20., 43. / 2.,
        -1. / 2., 1.,  1.,       -1. / 2., 1., 1.,      -1. / 2., 1.,  1.,
        1.,       1.,  1.,       1.,       1., 1.,      3.,       3.,  3.,
        29. / 2., 16., 31.,      -3. / 2., 0., 15.,     1. / 2.,  2.,  17.,
        1.,       1.,  5. / 2.,  1.,       1., 5. / 2., 1.,       1.,  5. / 2.,
        -1.,      -1., -1.,      1.,       1., 1.,      1.,       1.,  1.,
        -7. / 2., -2., 13.,      -3. / 2., 0., 15.,     37. / 2., 20., 35.,
        1.,       1.,  5. / 2.,  1.,       1., 5. / 2., 1.,       1.,  5. / 2.,
        1.,       1.,  1.,       1.,       1., 1.,      3.,       3.,  3.};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CHECK(sum_over_row == approx(expected_sum_over_each_row.at(row)));
    }
  }
  {
    INFO("2D massive");
    const domain::creators::Rectangle domain_creator{
        {{-4., -3.}}, {{4., 3.}}, {{false, false}}, {{1, 1}}, {{3, 3}}};
    // TODO: update expected matrix for this parameter
    const double penalty_parameter = 1.;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<true>(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        28. / 3., 64. / 3., 35. / 6., 16.,      0.,       2.,       14. / 3.,
        8. / 3.,  7. / 6.,  -1. / 6., 4. / 3.,  1. / 3.,  -2. / 3., 16. / 3.,
        4. / 3.,  -1. / 6., 4. / 3.,  1. / 3.,  -1. / 3., -4. / 3., -1. / 3.,
        4. / 3.,  16. / 3., 4. / 3.,  1. / 3.,  4. / 3.,  1. / 3.,  10. / 3.,
        -8. / 3., -1. / 6., 16.,      0.,       2.,       32. / 3., 80. / 3.,
        43. / 6., -1. / 6., 4. / 3.,  1. / 3.,  -2. / 3., 16. / 3., 4. / 3.,
        -1. / 6., 4. / 3.,  1. / 3.,  1. / 3.,  4. / 3.,  1. / 3.,  4. / 3.,
        16. / 3., 4. / 3.,  1.,       4.,       1.,       29. / 6., 64. / 3.,
        31. / 3., -2.,      0.,       20.,      1. / 6.,  8. / 3.,  17. / 3.,
        1. / 3.,  4. / 3.,  5. / 6.,  4. / 3.,  16. / 3., 10. / 3., 1. / 3.,
        4. / 3.,  5. / 6.,  -1. / 3., -4. / 3., -1. / 3., 4. / 3.,  16. / 3.,
        4. / 3.,  1. / 3.,  4. / 3.,  1. / 3.,  -7. / 6., -8. / 3., 13. / 3.,
        -2.,      0.,       20.,      37. / 6., 80. / 3., 35. / 3., 1. / 3.,
        4. / 3.,  5. / 6.,  4. / 3.,  16. / 3., 10. / 3., 1. / 3.,  4. / 3.,
        5. / 6.,  1. / 3.,  4. / 3.,  1. / 3.,  4. / 3.,  16. / 3., 4. / 3.,
        1.,       4.,       1.};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CAPTURE_PRECISE(sum_over_row);
      CHECK(sum_over_row == approx(expected_sum_over_each_row.at(row)));
    }
  }
  {
    INFO("3D massless");
    const domain::creators::Brick domain_creator{{{-2., -2., -2.}},
                                                 {{2., 2., 2.}},
                                                 {{false, false, false}},
                                                 {{1, 1, 1}},
                                                 {{3, 3, 3}}};
    const double penalty_parameter = 1.5;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<false>(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        112.5, 75.0,  78.0,  75.0, 37.5, 40.5,  78.0, 40.5,  43.5, 75.0, 37.5,
        40.5,  37.5,  0.0,   3.0,  40.5, 3.0,   6.0,  78.0,  40.5, 43.5, 40.5,
        3.0,   6.0,   43.5,  6.0,  9.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        -2.0,  -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   -2.0, -2.0, -2.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  -2.0, -2.0,  -2.0, -2.0,  -2.0, -2.0, -2.0,
        -2.0,  -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  72.0, 34.5,
        37.5,  34.5,  -3.0,  0.0,  37.5, 0.0,   3.0,  75.0,  37.5, 40.5, 37.5,
        0.0,   3.0,   40.5,  3.0,  6.0,  118.5, 81.0, 84.0,  81.0, 43.5, 46.5,
        84.0,  46.5,  49.5,  -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, -2.0, -2.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  -2.0, -2.0,  -2.0, 1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   4.0,  4.0,  4.0,   4.0,  72.0,  34.5, 37.5, 75.0,
        37.5,  40.5,  118.5, 81.0, 84.0, 34.5,  -3.0, 0.0,   37.5, 0.0,  3.0,
        81.0,  43.5,  46.5,  37.5, 0.0,  3.0,   40.5, 3.0,   6.0,  84.0, 46.5,
        49.5,  -2.0,  1.0,   1.0,  -2.0, 1.0,   1.0,  -2.0,  1.0,  1.0,  -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   4.0,   4.0,   4.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  4.0,
        4.0,   4.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        -2.0,  -2.0,  -2.0,  -2.0, -2.0, -2.0,  -2.0, -2.0,  -2.0, 1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  31.5,  -6.0, -3.0,  34.5, -3.0, 0.0,
        78.0,  40.5,  43.5,  34.5, -3.0, 0.0,   37.5, 0.0,   3.0,  81.0, 43.5,
        46.5,  78.0,  40.5,  43.5, 81.0, 43.5,  46.5, 124.5, 87.0, 90.0, -2.0,
        1.0,   1.0,   -2.0,  1.0,  1.0,  -2.0,  1.0,  1.0,   -2.0, 1.0,  1.0,
        -2.0,  1.0,   1.0,   -2.0, 1.0,  1.0,   -2.0, 1.0,   1.0,  -2.0, 1.0,
        1.0,   -2.0,  1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  4.0,
        4.0,   4.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   4.0,  4.0,   4.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  4.0,   4.0,  4.0,   4.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   72.0, 75.0, 118.5, 34.5, 37.5,  81.0, 37.5, 40.5,
        84.0,  34.5,  37.5,  81.0, -3.0, 0.0,   43.5, 0.0,   3.0,  46.5, 37.5,
        40.5,  84.0,  0.0,   3.0,  46.5, 3.0,   6.0,  49.5,  1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   -2.0,  -2.0, -2.0, 1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        -2.0,  -2.0,  -2.0,  1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  -2.0,  -2.0, -2.0, -2.0,
        -2.0,  -2.0,  -2.0,  -2.0, -2.0, 1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   31.5,  34.5,  78.0, -6.0, -3.0,  40.5, -3.0,  0.0,  43.5, 34.5,
        37.5,  81.0,  -3.0,  0.0,  43.5, 0.0,   3.0,  46.5,  78.0, 81.0, 124.5,
        40.5,  43.5,  87.0,  43.5, 46.5, 90.0,  1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        -2.0,  -2.0,  -2.0,  1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  -2.0,  -2.0, -2.0, 1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   4.0,   4.0,   4.0,  4.0,  4.0,   4.0,  4.0,   4.0,  4.0,  31.5,
        34.5,  78.0,  34.5,  37.5, 81.0, 78.0,  81.0, 124.5, -6.0, -3.0, 40.5,
        -3.0,  0.0,   43.5,  40.5, 43.5, 87.0,  -3.0, 0.0,   43.5, 0.0,  3.0,
        46.5,  43.5,  46.5,  90.0, 1.0,  1.0,   4.0,  1.0,   1.0,  4.0,  1.0,
        1.0,   4.0,   1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  4.0,  4.0,   4.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   4.0,   4.0,  4.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        4.0,   4.0,   4.0,   -2.0, -2.0, -2.0,  -2.0, -2.0,  -2.0, -2.0, -2.0,
        -2.0,  1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   -9.0, -6.0, 37.5,
        -6.0,  -3.0,  40.5,  37.5, 40.5, 84.0,  -6.0, -3.0,  40.5, -3.0, 0.0,
        43.5,  40.5,  43.5,  87.0, 37.5, 40.5,  84.0, 40.5,  43.5, 87.0, 84.0,
        87.0,  130.5, 1.0,   1.0,  4.0,  1.0,   1.0,  4.0,   1.0,  1.0,  4.0,
        1.0,   1.0,   4.0,   1.0,  1.0,  4.0,   1.0,  1.0,   4.0,  1.0,  1.0,
        4.0,   1.0,   1.0,   4.0,  1.0,  1.0,   4.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   4.0,   4.0,  4.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        4.0,   4.0,   4.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  4.0,  4.0,
        4.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   1.0,  1.0,  1.0,
        1.0,   1.0,   1.0,   1.0,  1.0,  1.0,   1.0,  1.0,   4.0,  4.0,  4.0,
        4.0,   4.0,   4.0,   4.0,  4.0,  4.0};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CHECK(sum_over_row == expected_sum_over_each_row.at(row));
    }
  }
  {
    INFO("3D massive");
    const domain::creators::Brick domain_creator{{{-2., -2., -2.}},
                                                 {{2., 2., 2.}},
                                                 {{false, false, false}},
                                                 {{1, 1, 1}},
                                                 {{3, 3, 3}}};
    const double penalty_parameter = 1.5;
    CAPTURE(penalty_parameter);
    const auto operator_matrix =
        TestHelpers::Poisson::dg::first_order_operator_matrix<true>(
            domain_creator, penalty_parameter);
    std::vector<double> expected_sum_over_each_row{
        25. / 6.,  100. / 9.,  26. / 9.,  100. / 9.,  200. / 9.,  6.,
        26. / 9.,  6.,         29. / 18., 100. / 9.,  200. / 9.,  6.,
        200. / 9., 0.,         16. / 9.,  6.,         16. / 9.,   8. / 9.,
        26. / 9.,  6.,         29. / 18., 6.,         16. / 9.,   8. / 9.,
        29. / 18., 8. / 9.,    1. / 3.,   -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -32. / 27., 64. / 27.,  16. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -8. / 27.,  -32. / 27., -8. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -2. / 27.,  -8. / 27.,  -2. / 27.,
        -8. / 27., -32. / 27., -8. / 27., -2. / 27.,  -8. / 27.,  -2. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        8. / 3.,   46. / 9.,   25. / 18., 46. / 9.,   -16. / 9.,  0.,
        25. / 18., 0.,         1. / 9.,   100. / 9.,  200. / 9.,  6.,
        200. / 9., 0.,         16. / 9.,  6.,         16. / 9.,   8. / 9.,
        79. / 18., 12.,        28. / 9.,  12.,        232. / 9.,  62. / 9.,
        28. / 9.,  62. / 9.,   11. / 6.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -32. / 27., 64. / 27.,  16. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -8. / 27.,  -32. / 27., -8. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        8. / 3.,   46. / 9.,   25. / 18., 100. / 9.,  200. / 9.,  6.,
        79. / 18., 12.,        28. / 9.,  46. / 9.,   -16. / 9.,  0.,
        200. / 9., 0.,         16. / 9.,  12.,        232. / 9.,  62. / 9.,
        25. / 18., 0.,         1. / 9.,   6.,         16. / 9.,   8. / 9.,
        28. / 9.,  62. / 9.,   11. / 6.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -32. / 27., 64. / 27.,  16. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  16. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  -2. / 27.,  -8. / 27.,  -2. / 27.,
        -8. / 27., -32. / 27., -8. / 27., -2. / 27.,  -8. / 27.,  -2. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        7. / 6.,   -8. / 9.,   -1. / 9.,  46. / 9.,   -16. / 9.,  0.,
        26. / 9.,  6.,         29. / 18., 46. / 9.,   -16. / 9.,  0.,
        200. / 9., 0.,         16. / 9.,  12.,        232. / 9.,  62. / 9.,
        26. / 9.,  6.,         29. / 18., 12.,        232. / 9.,  62. / 9.,
        83. / 18., 116. / 9.,  10. / 3.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -32. / 27., 64. / 27.,  16. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        -8. / 27., 16. / 27.,  4. / 27.,  -2. / 27.,  4. / 27.,   1. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  16. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        8. / 3.,   100. / 9.,  79. / 18., 46. / 9.,   200. / 9.,  12.,
        25. / 18., 6.,         28. / 9.,  46. / 9.,   200. / 9.,  12.,
        -16. / 9., 0.,         232. / 9., 0.,         16. / 9.,   62. / 9.,
        25. / 18., 6.,         28. / 9.,  0.,         16. / 9.,   62. / 9.,
        1. / 9.,   8. / 9.,    11. / 6.,  1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  64. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -8. / 27.,  -32. / 27., -8. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -2. / 27.,  -8. / 27.,  -2. / 27.,
        -8. / 27., -32. / 27., -8. / 27., -2. / 27.,  -8. / 27.,  -2. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        7. / 6.,   46. / 9.,   26. / 9.,  -8. / 9.,   -16. / 9.,  6.,
        -1. / 9.,  0.,         29. / 18., 46. / 9.,   200. / 9.,  12.,
        -16. / 9., 0.,         232. / 9., 0.,         16. / 9.,   62. / 9.,
        26. / 9.,  12.,        83. / 18., 6.,         232. / 9.,  116. / 9.,
        29. / 18., 62. / 9.,   10. / 3.,  1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  64. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  -8. / 27.,  -32. / 27., -8. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        -2. / 27., -8. / 27.,  -2. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.,
        7. / 6.,   46. / 9.,   26. / 9.,  46. / 9.,   200. / 9.,  12.,
        26. / 9.,  12.,        83. / 18., -8. / 9.,   -16. / 9.,  6.,
        -16. / 9., 0.,         232. / 9., 6.,         232. / 9.,  116. / 9.,
        -1. / 9.,  0.,         29. / 18., 0.,         16. / 9.,   62. / 9.,
        29. / 18., 62. / 9.,   10. / 3.,  1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  64. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  16. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  -2. / 27.,  -8. / 27.,  -2. / 27.,
        -8. / 27., -32. / 27., -8. / 27., -2. / 27.,  -8. / 27.,  -2. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        -1. / 3.,  -8. / 9.,   25. / 18., -8. / 9.,   -16. / 9.,  6.,
        25. / 18., 6.,         28. / 9.,  -8. / 9.,   -16. / 9.,  6.,
        -16. / 9., 0.,         232. / 9., 6.,         232. / 9.,  116. / 9.,
        25. / 18., 6.,         28. / 9.,  6.,         232. / 9.,  116. / 9.,
        28. / 9.,  116. / 9.,  29. / 6.,  1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  64. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        4. / 27.,  16. / 27.,  16. / 27., 1. / 27.,   4. / 27.,   4. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 16. / 27.,  64. / 27.,  16. / 27.,
        1. / 27.,  4. / 27.,   1. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  1. / 27.,   4. / 27.,   1. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  16. / 27.,  64. / 27.,  16. / 27.,
        4. / 27.,  16. / 27.,  4. / 27.,  4. / 27.,   16. / 27.,  4. / 27.,
        16. / 27., 64. / 27.,  16. / 27., 4. / 27.,   16. / 27.,  4. / 27.};
    for (size_t row = 0; row < operator_matrix.rows(); row++) {
      double sum_over_row = 0;
      for (size_t col = 0; col < operator_matrix.columns(); col++) {
        sum_over_row += operator_matrix(row, col);
      }
      CAPTURE(row);
      CHECK(sum_over_row == approx(expected_sum_over_each_row.at(row)));
    }
  }
}
